# Documentación de la API: **InventorySystem**

## Descripción del Proyecto

**InventorySystem** es un sistema para gestionar inventarios de productos, movimientos de inventarios entre diferentes tiendas y registrar las operaciones de cada producto en el sistema. Está diseñado para ser escalable, modular y fácil de integrar con otros sistemas, y está construido utilizando _Node.js_, _TypeScript_, _Prisma ORM_, y _Swagger_ para la documentación de la API.

## Tecnologías Utilizadas

- **Node.js**: Entorno de ejecución para el backend.
- **TypeScript**: Lenguaje de programación para garantizar un orden.
- **Prisma ORM**: Para la interacción con la base de datos PostgreSQL o cualquier otra.
- **Swagger**: Para la documentación interactiva de la API.
- **Jest**: Framework para pruebas unitarias y de integración.
- **Supertest**: Librería para realizar pruebas de integración sobre la API.
- **Artillery**: Herramienta de pruebas de carga para simular tráfico en la API.
- **Winston**: Librería para el registro de logs de la aplicación.
- **Express.js**: Framework web para manejar solicitudes HTTP.


## Instrucciones de Instalación

### Requisitos Previos

- **Node.js**
- **Prisma CLI** instalado globalmente (`npm install -g prisma`)
- **Docker** 


### Instalación de manera automatica

1. Clona el repositorio:
```bash
git clone https://github.com/tu-repositorio/inventorysystem.git 
cd inventorysystem
```
4. Configura la base de datos en `.env` toma en cuenta el `.env.example` para poder saber las variables necesarias:  
```json
DATABASE_URL="postgresql://<username>:<password>@localhost:<puerto>/postgres?schema=public"

POSTGRES_USER=""

POSTGRES_PASSWORD=""

POSTGRES_DB=""

PORT=""

SWAGGER_API_URL=""
```
2. Ejecuta el comando docker:
```bash
docker-compose up --build
```

6. Realizar las migraciones de Prisma es necesario tener un servidor activo `postgress`.
7. Una ves realizado se ejecutara el siguiente comando con la finalidad de exportar todo el contenido `prisma/schema.prisma` a el servidor:
```bash
pnpm prisma migrate deploy
```    
7. La API estará disponible en `http://localhost:3000` o el puerto asignado en el `.env`.

### Instalación de manera manual

1. Clona el repositorio:
```bash
git clone https://github.com/tu-repositorio/inventorysystem.git 
cd inventorysystem
```
2. Instala las `pnpm` para mejor rendimiento:
```bash
RUN npm install -g pnpm
```
3. Instala las dependencias del proyecto:    
```bash
pnpm install
```    
4. Configura la base de datos en `.env` toma en cuenta el `.env.example` para poder saber las variables necesarias:  
```json
DATABASE_URL="postgresql://<username>:<password>@localhost:<puerto>/postgres?schema=public"

POSTGRES_USER=""

POSTGRES_PASSWORD=""

POSTGRES_DB=""

PORT=""

SWAGGER_API_URL=""
```
5. Realizar las migraciones de Prisma es necesario tener un servidor activo `postgress`.
6. Una ves realizado se ejecutara el siguiente comando con la finalidad de exportar todo el contenido `prisma/schema.prisma` a el servidor:
```bash
pnpm prisma migrate deploy
```    
6. Compila y ejecuta el proyecto:
```bash
pnpm run dev
```
7. La API estará disponible en `http://localhost:3000` o el puerto asignado en el `.env`.
